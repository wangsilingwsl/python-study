"""
@description: Python基础：字符串和编码
@author     : wsl
@date       : 2024/12/17
"""

"""
1. 为什么需要编码？
计算机只懂 数字，不会直接理解我们人类使用的 文字。

比如我们想告诉计算机显示字母 A，计算机需要先把 A 转换成数字。
如果我们写一个中文字符，比如 “中”，计算机同样要转换成数字才能理解。
这种把 文字 转换成 数字 的规则，就叫做 编码。

2. ASCII编码：最早的编码标准
最初，计算机是美国人发明的，所以只考虑了 英文字母、数字和一些符号。

ASCII编码 是最早的编码标准，它用 1个字节（8位二进制）来表示字符。
每个字符对应一个数字，比如：
A 对应数字 65，二进制是 01000001。
小写字母 z 对应数字 122，二进制是 01111010。
问题：ASCII 编码能表示的字符非常有限，只有 128 个，根本装不下中文、日文等其他语言。

3. GB2312编码：为中文量身定做
ASCII 解决不了中文，所以中国设计了 GB2312 编码。

它使用 2个字节 来表示一个中文字符，比如 中。
但是 GB2312 只适用于中文，别的国家有自己的编码标准，比如：
日本：Shift_JIS
韩国：Euc-KR
问题：每个国家都自己制定编码标准，编码之间容易“打架”，如果一个文件里混合多种语言，就会显示乱码。

4. Unicode编码：一统天下
为了不再出现乱码，设计了一个全球通用的标准：Unicode。

Unicode 把世界上所有语言的字符都放到一个编码表里，统一编号。
大部分常用字符用 2个字节 表示，复杂或稀有的字符用 4个字节。
比如：

A 在 Unicode 编码中是 00000000 01000001。
汉字 中 在 Unicode 编码中是十进制 20013，二进制是 01001110 00101101。
问题：虽然 Unicode 能解决乱码问题，但它占用空间大，比如英文字符原本用 1 个字节，现在需要 2 个字节，非常浪费空间。

5. UTF-8编码：既节省空间又解决乱码
为了解决 Unicode 太占空间的问题，出现了 UTF-8 编码。

UTF-8 是一种 变长编码，它根据字符的大小来决定使用几个字节：
英文字母：用 1个字节。
中文字符：用 3个字节。
特别稀有的字符：用 4-6个字节。
举例：

字母 A 在 UTF-8 中用 1个字节（和 ASCII 编码相同）。
汉字 中 在 UTF-8 中用 3个字节。

总结一句话：
编码 就是把人类的文字转换成计算机能理解的数字。
ASCII 编码适合英文，GB2312 适合中文，但不同国家的编码容易冲突导致乱码。
Unicode 解决了乱码问题，但占用空间大。
UTF-8 是一种高效的 Unicode 编码方式，它能节省空间，又支持全球所有语言，是目前最常用的编码。
"""


def string():
    """
    Python中的字符串
    在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：
    """

    # 包含中文的字符串
    print('包含中文的字符串')

    # 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
    print('ord()函数获取字符的整数表示')
    print(ord('A'))
    print(ord('中'))
    print('chr()函数把编码转换为对应的字符')
    print(chr(66))
    print(chr(25991))

    # 如果知道字符的整数编码，还可以用十六进制这么写str：
    print('十六进制写str：', '\u4e2d\u6587')

    # 以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
    print('\'ABC\'encode()方法可以编码为指定的bytes：', 'ABC'.encode('ascii'))
    print('中文\'encode()方法可以编码为指定的bytes：', '中文'.encode('utf-8'))


def format_string():
    """
    格式化
    我们经常会输出类似'亲爱的xxx你好！你xx月的话费是xx，余额是xx'之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。
    """
    # 在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
    # 字符串中的%是一个占位符，它表示用一个字符串替换，%后面的字符串是用来替换占位符的变量或值。
    print('Hello, %s' % 'world')
    print('你好，%s！欢迎你来到%s ' % ('selene', 'Python世界'))

    # 整数。用%d表示
    print('整数：%d' % 100)

    # 浮点数。用%f表示
    print('浮点数：%f' % 3.1415926)

    # 十六进制整数。用%x表示
    print('十六进制整数：%x' % 255)

    # 有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
    print('转义：%d%%' % 7)

    # format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
    print('Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125))
    print('%2d-%02d' % (3, 1))  # 3-01，%2d表示两位整数，不足两位前面补空格。%02d表示两位整数，不足两位前面补0。
    print('%.2f' % 3.1415926)  # 3.14，%.2f表示两位小数。


# 练习
# 小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
def test():
    s1 = 72
    s2 = 85
    r = (s2 - s1) / s1 * 100
    print('小明成绩提升了%.1f%%' % r)


if __name__ == '__main__':
    string()
    format_string()
    test()
